import React from 'react'
import ReactDOMServer from 'react-dom/server'
import {
  CostChangeEvent,
  CostChangeReport,
} from '../../domain/value-objects/CostChangeReport'
import dayjs from 'dayjs'
import {formatDate} from '../../../../common/utils/formatDate'
import {
  motivationalQuoteOfADay,
  Quote,
  randomLearnFromFailureQuote,
} from '../../../../common/utils/quotes'

const css = `
   table {
      font-family: arial, sans-serif;
      font-size: x-small;
      border-collapse: collapse;
      width: 100%;
    }
    
    .error {
      color: red
    }

    td, th {
      border: 1px solid #dddddd;
      text-align: left;
      padding: 8px;
    }

    tr:nth-child(even) {
      background-color: #dddddd;
    }
    
    blockquote {
        margin: 0;
    }

    blockquote p {
        padding: 15px;
        background: #eee;
        border-radius: 5px;
    }

    blockquote p::before {
        content: '\\201C';
    }

    blockquote p::after {
        content: '\\201D';
    }
`

function CostChangeEventTable({
  title,
  data,
}: {
  title: string
  data: CostChangeEvent[]
}) {
  if (!data || data.length === 0) {
    return null
  }

  return (
    <>
      <h3>{title}</h3>
      <table>
        <tr>
          <th>Invoice Date</th>
          <th>Invoice Number</th>
          <th>Bucket</th>
          <th>Vendor</th>
          <th>Item Number</th>
          <th>Store</th>
          <th>Description</th>
          <th>Previous Invoice Cost</th>
          <th>Invoice Cost</th>
        </tr>
        {data.map((item) => (
          <tr key={item.VendorName + '_' + item.ItemNumber}>
            <td>{formatDate(item.InvoiceDate)}</td>
            <td>{item.InvoiceNumber}</td>
            <td>{item.Bucket}</td>
            <td>{item.VendorName}</td>
            <td>{item.ItemNumber}</td>
            <td>{item.StoreName}</td>
            <td>{item.Description}</td>
            <td>{item.PreviousInvoiceCost}</td>
            <td>{item.InvoiceCost}</td>
          </tr>
        ))}
      </table>
    </>
  )
}

function QuoteComponent({quote: {text, author}}: {quote: Quote}) {
  return (
    <blockquote>
      <p>
        {'"' + text + '"'} - {author}
      </p>
    </blockquote>
  )
}

export function costChangeReportToHTML({
  sourceName,
  reportStarted,
  reportEnded,
  error,
  resultsArePartial,
  items,
}: CostChangeReport): string {
  const executionTimeInMinutes = dayjs(reportEnded).diff(
    reportStarted,
    'minutes',
  )

  const isEmpty = items.length === 0
  const shouldHasAMotivationalQuote = !error && !isEmpty

  return ReactDOMServer.renderToString(
    <>
      <style>{css}</style>
      <h1>Cost Change Report ({formatDate(reportEnded)})</h1>
      <p>
        The report was build using data from {sourceName}. Took{' '}
        {executionTimeInMinutes} minutes to compute.
      </p>
      {shouldHasAMotivationalQuote && (
        <>
          <hr />
          <p>Motivational quote of the day:</p>
          <QuoteComponent quote={motivationalQuoteOfADay()} />
        </>
      )}
      {error && (
        <>
          <hr />
          <h3 className="error">Error</h3>
          <p className="error">{error}</p>
          <QuoteComponent quote={randomLearnFromFailureQuote()} />
        </>
      )}
      {isEmpty && (
        <>
          <h3>No cost change events</h3>
          <p>We have not found any cost change events.</p>
        </>
      )}
      <CostChangeEventTable title="Cost Change Events" data={items} />
      {resultsArePartial && (
        <>
          <h3>Results you see are partial</h3>
          <p>To check all the events check {sourceName}</p>
        </>
      )}
      <hr />
      <p>
        This report was generated by an automatic system. Please, contact
        engagingenterprisesltd@gmail.com for support.
      </p>
      <p>Let&apos;s automate the world</p>
    </>,
  )
}
